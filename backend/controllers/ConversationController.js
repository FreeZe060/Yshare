const conversationService = require('../services/conversationService');

exports.getAllConversations = async (req, res) => {
    console.log("üì• [getAllConversations] Requ√™te admin re√ßue");
    try {
        const conversations = await conversationService.getAllConversations();
        console.log(`‚úÖ [getAllConversations] ${conversations.length} conversations r√©cup√©r√©es`);
        return res.status(200).json(conversations);
    } catch (error) {
        console.error("‚ùå [getAllConversations] Erreur :", error.message);
        return res.status(500).json({ message: error.message });
    }
};

exports.getMyConversations = async (req, res) => {
    const userId = req.user?.id;
    console.log(`üì• [getMyConversations] Requ√™te pour utilisateur #${userId}`);

    if (!userId) return res.status(401).json({ message: "Authentification requise." });

    try {
        const conversations = await conversationService.getUserConversations(userId);
        console.log(`‚úÖ [getMyConversations] ${conversations.length} conversations r√©cup√©r√©es`);
        return res.status(200).json(conversations);
    } catch (error) {
        console.error("‚ùå [getMyConversations] Erreur :", error.message);
        return res.status(500).json({ message: error.message });
    }
};

exports.startOrGetConversation = async (req, res) => {
    const senderId = req.user?.id;
    const { recipientId, eventId, newsId } = req.body;

    console.log("üì• [startOrGetConversation] Tentative cr√©ation ou r√©cup√©ration", {
        senderId, recipientId, eventId, newsId
    });

    if (!senderId || !recipientId) {
        return res.status(400).json({ message: "senderId et recipientId sont requis." });
    }

    try {
        const [conversation, created] = await conversationService.findOrCreateConversation(senderId, recipientId, eventId, newsId);
        console.log(`‚úÖ [startOrGetConversation] Conversation ${created ? "cr√©√©e" : "existante"} avec ID ${conversation.id}`);
        return res.status(200).json(conversation);
    } catch (error) {
        console.error("‚ùå [startOrGetConversation] Erreur :", error.message);
        return res.status(500).json({ message: error.message });
    }
};

exports.sendMessage = async (req, res) => {
    const senderId = req.user?.id;
    const { conversationId, content, replyToMessageId } = req.body;

    console.log("üì® [sendMessage] Envoi message par", senderId, "dans conv", conversationId);

    if (!content) return res.status(400).json({ message: "Contenu du message requis." });

    try {
        const message = await conversationService.sendMessage({ conversationId, senderId, content, replyToMessageId });
        console.log("‚úÖ [sendMessage] Message envoy√© avec ID", message.id);
        return res.status(201).json(message);
    } catch (error) {
        console.error("‚ùå [sendMessage] Erreur :", error.message);
        return res.status(500).json({ message: error.message });
    }
};

exports.editMessage = async (req, res) => {
    const userId = req.user?.id;
    const { messageId } = req.params;
    const { newContent } = req.body;

    console.log("‚úèÔ∏è [editMessage] Modification du message", messageId);

    try {
        const updated = await conversationService.editMessage(messageId, userId, newContent);
        console.log("‚úÖ [editMessage] Message mis √† jour");
        return res.status(200).json(updated);
    } catch (error) {
        console.error("‚ùå [editMessage] Erreur :", error.message);
        return res.status(500).json({ message: error.message });
    }
};

exports.deleteMessage = async (req, res) => {
    const userId = req.user?.id;
    const { messageId } = req.params;

    console.log("üóëÔ∏è [deleteMessage] Suppression du message", messageId);

    try {
        await conversationService.deleteMessage(messageId, userId);
        console.log("‚úÖ [deleteMessage] Message supprim√©");
        return res.status(204).end();
    } catch (error) {
        console.error("‚ùå [deleteMessage] Erreur :", error.message);
        return res.status(500).json({ message: error.message });
    }
};

exports.reactToMessage = async (req, res) => {
    const userId = req.user?.id;
    const { messageId } = req.params;
    const { emoji } = req.body;

    console.log("üòÄ [reactToMessage] R√©action", emoji, "au message", messageId);

    try {
        const message = await conversationService.reactToMessage(messageId, userId, emoji);
        console.log("‚úÖ [reactToMessage] R√©action ajout√©e");
        return res.status(200).json(message);
    } catch (error) {
        console.error("‚ùå [reactToMessage] Erreur :", error.message);
        return res.status(500).json({ message: error.message });
    }
};

exports.removeReaction = async (req, res) => {
    const userId = req.user?.id;
    const { messageId } = req.params;

    console.log("‚ùå [removeReaction] Suppression r√©action sur message", messageId);

    try {
        const message = await conversationService.removeEmoji(messageId, userId);
        console.log("‚úÖ [removeReaction] R√©action supprim√©e");
        return res.status(200).json(message);
    } catch (error) {
        console.error("‚ùå [removeReaction] Erreur :", error.message);
        return res.status(500).json({ message: error.message });
    }
};

exports.markAsSeen = async (req, res) => {
    const userId = req.user?.id;
    const { messageId } = req.params;

    console.log("üëÄ [markAsSeen] Marquage vu du message", messageId);

    try {
        const message = await conversationService.markAsSeen(messageId, userId);
        console.log("‚úÖ [markAsSeen] Marqu√© comme vu");
        return res.status(200).json(message);
    } catch (error) {
        console.error("‚ùå [markAsSeen] Erreur :", error.message);
        return res.status(500).json({ message: error.message });
    }
};

exports.deleteConversation = async (req, res) => {
    const userId = req.user?.id;
    const { conversationId } = req.params;

    console.log("üóëÔ∏è [deleteConversation] Suppression de la conversation", conversationId);

    try {
        await conversationService.deleteConversation(conversationId, userId);
        console.log("‚úÖ [deleteConversation] Conversation supprim√©e");
        return res.status(204).end();
    } catch (error) {
        console.error("‚ùå [deleteConversation] Erreur :", error.message);
        return res.status(500).json({ message: error.message });
    }
};

exports.linkToEventOrNews = async (req, res) => {
    const { conversationId } = req.params;
    const { eventId, newsId } = req.body;

    console.log("üîó [linkToEventOrNews] Liaison de la conversation", conversationId);

    try {
        const updated = await conversationService.linkToEventOrNews(conversationId, eventId, newsId);
        console.log("‚úÖ [linkToEventOrNews] Conversation li√©e");
        return res.status(200).json(updated);
    } catch (error) {
        console.error("‚ùå [linkToEventOrNews] Erreur :", error.message);
        return res.status(500).json({ message: error.message });
    }
};

exports.updateLinkedItem = async (req, res) => {
    const { conversationId } = req.params;
    const { eventId, newsId } = req.body;

    console.log(`‚ôªÔ∏è [updateLinkedItem] Mise √† jour des liens pour conversation #${conversationId}`);

    try {
        const updated = await conversationService.updateLinkedItem(conversationId, eventId, newsId);
        console.log("‚úÖ [updateLinkedItem] Conversation mise √† jour :", updated.id);
        return res.status(200).json(updated);
    } catch (error) {
        console.error("‚ùå [updateLinkedItem] Erreur :", error.message);
        return res.status(500).json({ message: error.message });
    }
};


exports.unlinkEventOrNews = async (req, res) => {
    const { conversationId } = req.params;

    console.log("‚ùå [unlinkEventOrNews] D√©liaison de la conversation", conversationId);

    try {
        const updated = await conversationService.unlinkEventOrNews(conversationId);
        console.log("‚úÖ [unlinkEventOrNews] Conversation d√©li√©e");
        return res.status(200).json(updated);
    } catch (error) {
        console.error("‚ùå [unlinkEventOrNews] Erreur :", error.message);
        return res.status(500).json({ message: error.message });
    }
};

exports.getConversationBetweenUsers = async (req, res) => {
    const { user1Id, user2Id } = req.params;

    console.log(`üîç [getConversationBetweenUsers] V√©rification d'une conversation entre #${user1Id} et #${user2Id}`);

    if (!user1Id || !user2Id) {
        return res.status(400).json({ message: "Les deux IDs utilisateur sont requis." });
    }

    try {
        const conversation = await conversationService.getConversationBetweenUsers(user1Id, user2Id);
        if (!conversation) {
            console.log("‚ÑπÔ∏è [getConversationBetweenUsers] Aucune conversation trouv√©e.");
            return res.status(404).json({ message: "Conversation introuvable." });
        }
        console.log("‚úÖ [getConversationBetweenUsers] Conversation trouv√©e :", conversation.id);
        return res.status(200).json(conversation);
    } catch (error) {
        console.error("‚ùå [getConversationBetweenUsers] Erreur :", error.message);
        return res.status(500).json({ message: error.message });
    }
};