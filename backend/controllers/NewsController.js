const newsService = require('../services/NewsService');

exports.createNews = async (req, res) => {
    try {
        if (!req.user) {
            return res.status(403).json({ message: "Utilisateur non authentifi√©." });
        }

        const { title, content, event_id } = req.body;
        let categories = [];

        // Parse les cat√©gories si envoy√©es depuis FormData
        if (req.body.categories) {
            try {
                categories = JSON.parse(req.body.categories);
            } catch (e) {
                return res.status(400).json({ message: "Cat√©gories mal format√©es." });
            }
        }

        if (!title || !content) {
            return res.status(400).json({ message: "Le titre et le contenu sont obligatoires." });
        }

        let image_url = req.body.image_url;
        if (req.file) {
            image_url = `/news-images/${req.file.filename}`;
        }

        const news = await newsService.createNews({
            title,
            content,
            image_url,
            user_id: req.user.id,
            event_id: event_id || null,
            categories, 
        });

        res.status(201).json({ message: "Actualit√© cr√©√©e avec succ√®s.", news });
    } catch (error) {
        res.status(500).json({ message: "Erreur lors de la cr√©ation de la news.", error: error.message });
    }
};

exports.getAllNews = async (req, res) => {
    try {
        const news = await newsService.getAllNews();
        res.status(200).json(news);
    } catch (error) {
        res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des actualit√©s.", error: error.message });
    }
};

exports.getNewsByEventId = async (req, res) => {
    try {
        const { eventId } = req.params;
        const news = await newsService.getNewsByEventId(eventId);
        res.status(200).json(news);
    } catch (error) {
        res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des actualit√©s.", error: error.message });
    }
};

exports.getNewsDetails = async (req, res) => {
    try {
        const { newsId } = req.params;
        console.log(`üì° Appel GET /news/${newsId}/details`);

        const news = await newsService.getNewsWithEventDetails(newsId);

        if (!news) {
            return res.status(404).json({ message: "Actualit√© non trouv√©e." });
        }

        res.status(200).json(news);
    } catch (error) {
        console.error(`‚ùå Erreur lors de la r√©cup√©ration de la news ID #${req.params.newsId}`, error.message);
        res.status(500).json({ message: "Erreur serveur.", error: error.message });
    }
};

exports.getNewsByUserId = async (req, res) => {
    try {
        const userId = req.user.id;
        const news = await newsService.getNewsByUserId(userId);
        res.status(200).json(news);
    } catch (error) {
        res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des actualit√©s de l'utilisateur.", error: error.message });
    }
};

exports.updateNews = async (req, res) => {
    try {
        const { newsId } = req.params;
        const updateData = { ...req.body };

        if (req.file) {
            updateData.image_url = `/news-images/${req.file.filename}`;
        }

        const updatedNews = await newsService.updateNews(newsId, updateData);
        res.status(200).json({ message: "News mise √† jour avec succ√®s.", news: updatedNews });
    } catch (error) {
        res.status(500).json({ message: "Erreur lors de la mise √† jour de la news.", error: error.message });
    }
};

exports.deleteNews = async (req, res) => {
    try {
        const { newsId } = req.params;
        const userId = req.user.id;
        const role = req.user.role;

        const result = await newsService.deleteNews(newsId, userId, role);
        res.status(200).json(result);
    } catch (error) {
        res.status(500).json({ message: "Erreur lors de la suppression de la news.", error: error.message });
    }
};

exports.addCategoryToNews = async (req, res) => {
    try {
        const { newsId } = req.params;
        const { categoryId } = req.body;

        console.log(`üì• Requ√™te POST pour ajouter cat√©gorie ${categoryId} √† la news ${newsId}`);

        if (!categoryId) {
            return res.status(400).json({ message: "ID de cat√©gorie requis." });
        }

        await newsService.addCategoryToNews(newsId, categoryId);

        console.log(`‚úÖ Cat√©gorie ${categoryId} ajout√©e √† la news ${newsId}`);
        res.status(200).json({ message: "Cat√©gorie ajout√©e avec succ√®s." });
    } catch (error) {
        console.error(`‚ùå Erreur ajout cat√©gorie:`, error.message);
        res.status(500).json({ message: "Erreur lors de l'ajout de la cat√©gorie.", error: error.message });
    }
};

exports.removeCategoryFromNews = async (req, res) => {
    try {
        const { newsId, categoryId } = req.params;

        console.log(`üì• Requ√™te DELETE pour retirer cat√©gorie ${categoryId} de la news ${newsId}`);

        const updatedNews = await newsService.removeCategoryFromNews(newsId, categoryId);

        console.log(`‚úÖ Cat√©gorie ${categoryId} retir√©e de la news ${newsId}`);
        res.status(200).json({ message: "Cat√©gorie retir√©e avec succ√®s.", news: updatedNews });
    } catch (error) {
        console.error(`‚ùå Erreur suppression cat√©gorie:`, error.message);
        res.status(500).json({ message: "Erreur lors de la suppression de la cat√©gorie.", error: error.message });
    }
};